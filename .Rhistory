f2
(a2 <- sapply(v, f2, y = 2*(1:5), simplify = "array"))
2*(1:5)
10*(5:8)
outer(10*(5:8),2*(1:5))
c(10*(5:8)) %*% t(c(2*(1:5)))
sapply(l,FUN = function(x) return(x**2))
lapply(l,FUN = function(x) return(x**2))
sapply(l,FUN = function(x) return(x**2),simplify = 'array')
install.packages('urca')
fpp2::seasadj
??seasadj
data = data.frame(a=factor(2,3,4))
data
data = data.frame(a=as.factor(2,3,4))
data = data.frame(a=as.factor(c(2,3,4)))
data
data$b = as.numeric(data$a)
data
data$c = as.numeric(as.character(data$a))
data
data = data.frame(a=as.factor(c(2,3,"f")))
data
str(data)
data$b = as.numeric(data$a)
data$c = as.numeric(as.character(data$a))
data
library(dplyr)
data[] <- lapply(data, function(x) if(is.factor(x)) as.numeric(as.character(x)) else x)
data
1 + 1
readxl::read_excel("C:/Users/ghanj/Downloads/New code test for MRM.xlsx",sheet = 3) %>% View()
readxl::read_excel("C:/Users/ghanj/Downloads/New code test for MRM.xlsx",sheet = 3,range = "B2:D24") %>% View()
paste0(data_loc,"New code test for MRM.xlsx")
data_loc = 'C:/Users/ghanj/Downloads/'
paste0(data_loc,"New code test for MRM.xlsx")
dataload = readxl::read_excel(paste0(data_loc,"New code test for MRM.xlsx"),sheet = 3,range = "B2:D24")
str(dataload)
dataload %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T))
dataload %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
`lower %95 CI` = t.test(EXPOSURE,na.rm = T)$conf.int)
t.test(dataload,na.rm = T)
t.test(dataload$EXPOSURE,na.rm = T)
t.test(dataload$EXPOSURE,na.rm = T)$conf.int
t.test(dataload$EXPOSURE,na.rm = T)$conf.int[1]
dataload %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
`lower %95 CI` = t.test(EXPOSURE,na.rm = T)$conf.int[1],
`upper %95 CI` = t.test(EXPOSURE,na.rm = T)$conf.int[2])
dataload %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T))
dataload %>%
filter(Date == '2018-01-01') %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
`lower %95 CI` = t.test(EXPOSURE,na.rm = T)$conf.int[1],
`upper %95 CI` = t.test(EXPOSURE,na.rm = T)$conf.int[2])
dataload %>%
filter(Date == '2018-01-01') %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
.groups = 'drop') %>%
mutate(Date = format(Date, "%b-%y"))
dataload %>%
filter(Date == '2018-01-01') %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
.groups = 'drop') %>%
mutate(Date = format(Date, "%b-%y")) %>% View()
dataload %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
.groups = 'drop') %>%
mutate(Date = format(Date, "%b-%y")) %>% View()
dataload %>%
arrange(Cust_num,Date) %>%
group_by(Date,Cust_num) %>%
mutate(EXPOSURE = if_else(
is.na(EXPOSURE),
(lag(EXPOSURE, order_by = Date) + lead(EXPOSURE, order_by = Date)) / 2,
EXPOSURE
)) %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
`lower %95 CI` = t.test(EXPOSURE,na.rm = T)$conf.int[1],
`upper %95 CI` = t.test(EXPOSURE,na.rm = T)$conf.int[2],
.groups = 'drop') %>%
mutate(Date = format(Date, "%b-%y"))
dataload %>%
arrange(Cust_num,Date) %>%
group_by(Date,Cust_num) %>%
mutate(EXPOSURE = if_else(
is.na(EXPOSURE),
(lag(EXPOSURE, order_by = Date) + lead(EXPOSURE, order_by = Date)) / 2,
EXPOSURE
)) %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
.groups = 'drop') %>%
mutate(Date = format(Date, "%b-%y"))
dataload %>%
arrange(Cust_num,Date) %>%
group_by(Date,Cust_num) %>%
mutate(EXPOSURE = if_else(
is.na(EXPOSURE),
(lag(EXPOSURE, order_by = Date) + lead(EXPOSURE, order_by = Date)) / 2,
EXPOSURE
))
dataload %>%
arrange(Cust_num,Date) %>%
group_by(Date,Cust_num) %>%
mutate(EXPOSURE = if_else(is.na(EXPOSURE),mean(c(lag(EXPOSURE, order_by = Date),lead(EXPOSURE, order_by = Date)),na.rm = T),EXPOSURE)) %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
.groups = 'drop') %>%
mutate(Date = format(Date, "%b-%y"))
dataload %>%
arrange(Cust_num,Date) %>%
group_by(Date,Cust_num) %>%
mutate(EXPOSURE = if_else(is.na(EXPOSURE),mean(c(lag(EXPOSURE, order_by = Date),lead(EXPOSURE, order_by = Date)),na.rm = T),EXPOSURE))
dataload %>%
arrange(Cust_num,Date) %>%
group_by(Cust_num) %>%
mutate(EXPOSURE = if_else(is.na(EXPOSURE),mean(c(lag(EXPOSURE, order_by = Date),lead(EXPOSURE, order_by = Date)),na.rm = T),EXPOSURE))
dataload %>%
arrange(Cust_num,Date) %>%
group_by(Cust_num) %>%
mutate(EXPOSURE = if_else(is.na(EXPOSURE),mean(c(lag(EXPOSURE, order_by = Date),lead(EXPOSURE, order_by = Date)),na.rm = T),EXPOSURE)) %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
.groups = 'drop') %>%
mutate(Date = format(Date, "%b-%y"))
dataload %>%
arrange(Cust_num,Date) %>%
group_by(Cust_num) %>%
mutate(EXPOSURE = if_else(is.na(EXPOSURE),mean(c(lag(EXPOSURE, order_by = Date),lead(EXPOSURE, order_by = Date)),na.rm = T),EXPOSURE)) %>%
group_by(Date) %>%
summarise(Mean = mean(EXPOSURE,na.rm = T),
Median = median(EXPOSURE,na.rm = T),
min = min(EXPOSURE,na.rm = T),
Max = max(EXPOSURE,na.rm = T),
`lower %95 CI` = t.test(c(EXPOSURE,sample(EXPOSURE,10,replace = T)),na.rm = T)$conf.int[1],
`upper %95 CI` = t.test(c(EXPOSURE,sample(EXPOSURE,10,replace = T)),na.rm = T)$conf.int[2],
.groups = 'drop') %>%
mutate(Date = format(Date, "%b-%y"))
Table_A <- data.frame(
ID = c(1, 2, 3, 4, 5),
Value_A = c(100, 200, 300, 400, 500)
)
Table_B <- data.frame(
ID = c(1, 6, 3, 7, 8),
Value_B = c(10, 20, 30, 40, 50)
)
anti_join(Table_A, Table_B, by = "ID")
# 1.ID present only in A
df_ID_only_in_A <- anti_join(df_A, df_B, by = "ID")
# 2.ID present only in B
df_ID_only_in_B <- anti_join(df_B, df_A, by = "ID")
# 3.IDs not common in both A and B
df_ID_not_both_A_B <- bind_rows(df_ID_only_in_A,df_ID_only_in_B)
df_A <- data.frame(
ID = c(1, 2, 3, 4, 5),
Value_A = c(100, 200, 300, 400, 500)
)
df_B <- data.frame(
ID = c(1, 6, 3, 7, 8),
Value_B = c(10, 20, 30, 40, 50)
)
# 1.ID present only in A
df_ID_only_in_A <- anti_join(df_A, df_B, by = "ID")
# 2.ID present only in B
df_ID_only_in_B <- anti_join(df_B, df_A, by = "ID")
# 3.IDs not common in both A and B
df_ID_not_both_A_B <- bind_rows(df_ID_only_in_A,df_ID_only_in_B)
df_ID_only_in_A
df_ID_only_in_B
df_ID_not_both_A_B
acs <-
readRDS('C:/Users/ghanj/OneDrive/Desktop/acs2019sample.rds') |>
mutate(higher_ed_degree = as.numeric(education %in% c("Bachelor's degree", "Advanced degree")))
library(dplyr)
acs <-
readRDS('C:/Users/ghanj/OneDrive/Desktop/acs2019sample.rds') |>
mutate(higher_ed_degree = as.numeric(education %in% c("Bachelor's degree", "Advanced degree")))
View(acs)
acs %>% distinct(race)
mod <-
glm(race ~ age + commute_time + weeks_worked + hours_worked,
acs,
family = binomial,
na.action = na.exclude)
summary(mod)
?glm
# Example data
set.seed(123)
n <- 100
X <- matrix(rnorm(n*2), ncol=2)  # 2 features
y <- rbeta(n, shape1=2, shape2=5)  # Target variable as a fraction
# Fit logistic regression model
logit_model <- glm(y ~ X[,1] + X[,2], family=binomial(link="logit"))
logit_model
# Predictions on new data
predictions_logit <- predict(logit_model, type="link")
predictions <- 1 / (1 + exp(-predictions_logit))  # Inverse logit to map predictions back to [0, 1]
predictions
data.frame(y,predictions) %>% View()
library(pROC)
# Install and load pROC package if not already installed
install.packages("pROC")
library(pROC)
# Example data
set.seed(123)
n <- 100
X <- matrix(rnorm(n*2), ncol=2)  # 2 features
y <- rbeta(n, shape1=2, shape2=5)  # Target variable as a fraction
# Fit a logistic regression model (or any model that predicts probabilities)
logit_model <- glm(y ~ X[,1] + X[,2], family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
predicted_probs
n <- 100
X <- matrix(rnorm(n*2), ncol=2)  # 2 features
y <- rbeta(n, shape1=2, shape2=5)  # Target variable as a fraction
# Fit a logistic regression model (or any model that predicts probabilities)
logit_model <- glm(y ~ X[,1] + X[,2], family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
library(MASS)
# Example data: Ordered factor for customer satisfaction (1 = poor, 5 = excellent)
set.seed(123)
customer_satisfaction <- factor(sample(1:5, 100, replace = TRUE), ordered = TRUE)
age <- rnorm(100, mean = 50, sd = 10)
income <- rnorm(100, mean = 50000, sd = 15000)
# Fit the ordinal regression model using proportional odds logistic regression
model <- polr(customer_satisfaction ~ age + income, data = data.frame(customer_satisfaction, age, income), method = "logistic")
# Display the summary of the model
summary(model)
age <- rnorm(100, mean = 50, sd = 10)
income <- rnorm(100, mean = 50000, sd = 150)
# Fit the ordinal regression model using proportional odds logistic regression
model <- polr(customer_satisfaction ~ age + income, data = data.frame(customer_satisfaction, age, income), method = "logistic")
# Display the summary of the model
summary(model)
age <- rnorm(100, mean = 50, sd = 10)
income <- rnorm(100, mean = 50000, sd = 1050)
age
income
# Fit the ordinal regression model using proportional odds logistic regression
model <- polr(customer_satisfaction ~ age + income, data = data.frame(customer_satisfaction, age, income), method = "logistic")
model
# Display the summary of the model
summary(model)
# Predicted probabilities
predicted_probs <- predict(model, type = "probs")
head(predicted_probs)  # Probabilities for each category
# Predicted class
predicted_class <- predict(model)
head(predicted_class)  # Predicted category
# Example data
set.seed(123)
n <- 100
X <- matrix(rnorm(n*2), ncol=2)  # 2 features
y <- rbeta(n, shape1=2, shape2=5)  # Target variable as a fraction
# Fit a logistic regression model (or any model that predicts probabilities)
logit_model <- glm(y ~ X[,1] + X[,2], family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
y <- c(0.1,0.25,0.35,0.5,0.62,0.8)
# Fit a logistic regression model (or any model that predicts probabilities)
logit_model <- glm(y ~ X[,1] + X[,2], family=binomial(link="logit"))
y <- sample(c(0.1,0.25,0.35,0.5,0.62,0.8),replace = T,size = n)
# Fit a logistic regression model (or any model that predicts probabilities)
logit_model <- glm(y ~ X[,1] + X[,2], family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
predicted_probs
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
?roc
X <- sample(c(0.09,0.22,0.4,0.54,0.69,0.9),replace = T,size = n)
y <- rbeta(n, shape1=2, shape2=5)  # Target variable as a fraction
y <- sample(c(0.1,0.25,0.35,0.5,0.62,0.8),replace = T,size = n)
# Fit a logistic regression model (or any model that predicts probabilities)
logit_model <- glm(y ~ X[,1] + X[,2], family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
n <- 100
X <- sample(c(0.09,0.22,0.4,0.54,0.69,0.9),replace = T,size = n)
y <- sample(c(0.1,0.25,0.35,0.5,0.62,0.8),replace = T,size = n)
logit_model <- glm(y ~ X, family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
predicted_probs
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
y = x * 4 + rnorm(1)
X <- sample(c(0.09,0.22,0.4,0.54,0.69,0.9),replace = T,size = n)
y = x * 4 + rnorm(1)
y = X * 4 + rnorm(1)
y = (y - min(y))/(max(y) - min(y))
logit_model <- glm(y ~ X, family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
predicted_probs
X <- sample(c(0.09,0.22,0.4,0.54,0.69,0.9),replace = T,size = n)
y = X * 4 + rnorm(1)
y = 1/(1+exp(-x))
y = 1/(1+exp(-y))
logit_model <- glm(y ~ X, family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
predicted_probs
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
data.frame(y,X,predicted_probs)
data.frame(y,X,predicted_probs) %>% View()
y = 2 + X * 4 + rnorm(1)
y = 1/(1+exp(-y))
logit_model <- glm(y ~ X, family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
y = 2 + X * 4 + rnorm(1,-2,6)
y = 1/(1+exp(-y))
logit_model <- glm(y ~ X, family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
z = rbeta(n, shape1=2, shape2=5)
y = 2 + X * 4 + rnorm(1,-2,6) + z
y = 1/(1+exp(-y))
y
2 + X * 4 + rnorm(1,-2,6) + z
y = (y-min(y))/(max(y) - min(y))
logit_model <- glm(y ~ X, family=binomial(link="logit"))
X <- matrix(rnorm(n*2), ncol=2)  # 2 features
X <- sample(c(0.09,0.22,0.4,0.54,0.69,0.9),replace = T,size = n)
z = rbeta(n, shape1=2, shape2=5)
y = 2 + X * 4 + rnorm(1,-2,6) + z
y = (y-min(y))/(max(y) - min(y))
logit_model <- glm(y ~ X, family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
logit_model <- glm(y ~ X + z, family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
logit_model <- glm(y ~ z, family=binomial(link="logit"))
# Get predicted probabilities (in the [0, 1] range)
predicted_probs <- predict(logit_model, type="response")
# Compute the ROC curve
roc_curve <- roc(y, predicted_probs)
# Compute the AUC
auc_value <- auc(roc_curve)
# Compute the Gini coefficient
gini_value <- 2 * auc_value - 1
# Output the results
cat("AUC:", auc_value, "\n")
cat("Gini Coefficient:", gini_value, "\n")
rmarkdown::pandoc_available()
rmarkdown::pandoc_version()
blogdown::serve_site()
setwd('D:/Documents/R Projects/')
# Install the hugo-coder theme into themes/ and update config
blogdown::install_theme(
repo = "luizdepra/hugo-coder",
subdir = NULL,
force = FALSE,
update_config = TRUE
)
blogdown::new_site(
dir = "D:/Documents/R Projects/cv-site-coder",  # Change this path if needed
theme = "luizdepra/hugo-coder",
sample = TRUE,
serve = TRUE
)
blogdown::build_site()
getwd()
setwd("D:/Documents/R Projects/cv-site-coder/")
blogdown::build_site()
